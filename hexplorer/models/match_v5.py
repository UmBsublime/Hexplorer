# generated by datamodel-codegen:
#   filename:  http://www.mingweisamuel.com/riotapi-schema/openapi-3.0.0.yml
#   timestamp: 2022-01-07T16:18:58+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, Field


class MetadataDto(BaseModel):
    dataVersion: str = Field(..., description="Match data version.")
    matchId: str = Field(..., description="Match id.")
    participants: List[str] = Field(..., description="A list of participant PUUIDs.")


class PerkStatsDto(BaseModel):
    defense: int
    flex: int
    offense: int


class PerkStyleSelectionDto(BaseModel):
    perk: int
    var1: int
    var2: int
    var3: int


class BanDto(BaseModel):
    championId: int
    pickTurn: int


class ObjectiveDto(BaseModel):
    first: bool
    kills: int


class Type(Enum):
    ASCENDED_EVENT = "ASCENDED_EVENT"
    BUILDING_KILL = "BUILDING_KILL"
    CAPTURE_POINT = "CAPTURE_POINT"
    CHAMPION_KILL = "CHAMPION_KILL"
    CHAMPION_SPECIAL_KILL = "CHAMPION_SPECIAL_KILL"
    CHAMPION_TRANSFORM = "CHAMPION_TRANSFORM"
    DRAGON_SOUL_GIVEN = "DRAGON_SOUL_GIVEN"
    ELITE_MONSTER_KILL = "ELITE_MONSTER_KILL"
    GAME_END = "GAME_END"
    ITEM_DESTROYED = "ITEM_DESTROYED"
    ITEM_PURCHASED = "ITEM_PURCHASED"
    ITEM_SOLD = "ITEM_SOLD"
    ITEM_UNDO = "ITEM_UNDO"
    LEVEL_UP = "LEVEL_UP"
    PAUSE_END = "PAUSE_END"
    PAUSE_START = "PAUSE_START"
    SKILL_LEVEL_UP = "SKILL_LEVEL_UP"
    TURRET_PLATE_DESTROYED = "TURRET_PLATE_DESTROYED"
    WARD_KILL = "WARD_KILL"
    WARD_PLACED = "WARD_PLACED"


class MatchTimelineInfoFrameParticipantFrameChampionStats(BaseModel):
    abilityHaste: Optional[int] = None
    abilityPower: int
    armor: int
    armorPen: int
    armorPenPercent: int
    attackDamage: int
    attackSpeed: int
    bonusArmorPenPercent: int
    bonusMagicPenPercent: int
    ccReduction: int
    cooldownReduction: int
    health: int
    healthMax: int
    healthRegen: int
    lifesteal: int
    magicPen: int
    magicPenPercent: int
    magicResist: int
    movementSpeed: int
    omnivamp: Optional[int] = None
    physicalVamp: Optional[int] = None
    power: int
    powerMax: int
    powerRegen: int
    spellVamp: int


class MatchTimelineInfoFrameParticipantFrameDamageStats(BaseModel):
    magicDamageDone: int
    magicDamageDoneToChampions: int
    magicDamageTaken: int
    physicalDamageDone: int
    physicalDamageDoneToChampions: int
    physicalDamageTaken: int
    totalDamageDone: int
    totalDamageDoneToChampions: int
    totalDamageTaken: int
    trueDamageDone: int
    trueDamageDoneToChampions: int
    trueDamageTaken: int


class MatchTimelinePosition(BaseModel):
    x: int
    y: int


class MatchTimelineInfoFrameParticipantFrame(BaseModel):
    championStats: MatchTimelineInfoFrameParticipantFrameChampionStats
    currentGold: int
    damageStats: MatchTimelineInfoFrameParticipantFrameDamageStats
    goldPerSecond: int
    jungleMinionsKilled: int
    level: int
    minionsKilled: int
    participantId: int
    position: MatchTimelinePosition
    timeEnemySpentControlled: int
    totalGold: int
    xp: int


class MatchTimelineInfoFrameParticipantFrames(BaseModel):
    field_1: MatchTimelineInfoFrameParticipantFrame = Field(..., alias="1")
    field_2: MatchTimelineInfoFrameParticipantFrame = Field(..., alias="2")
    field_3: MatchTimelineInfoFrameParticipantFrame = Field(..., alias="3")
    field_4: MatchTimelineInfoFrameParticipantFrame = Field(..., alias="4")
    field_5: MatchTimelineInfoFrameParticipantFrame = Field(..., alias="5")
    field_6: MatchTimelineInfoFrameParticipantFrame = Field(..., alias="6")
    field_7: MatchTimelineInfoFrameParticipantFrame = Field(..., alias="7")
    field_8: MatchTimelineInfoFrameParticipantFrame = Field(..., alias="8")
    field_9: MatchTimelineInfoFrameParticipantFrame = Field(..., alias="9")
    field_10: MatchTimelineInfoFrameParticipantFrame = Field(..., alias="10")


class MatchTimelineInfoFrameEventVictimDamageDealt(BaseModel):
    basic: bool
    magicDamage: int
    name: str
    participantId: int
    physicalDamage: int
    spellName: str
    spellSlot: int
    trueDamage: int
    type: str


class MatchTimelineInfoParticipant(BaseModel):
    participantId: int
    puuid: str


class PerkStyleDto(BaseModel):
    description: str
    selections: List[PerkStyleSelectionDto]
    style: int


class ObjectivesDto(BaseModel):
    baron: ObjectiveDto
    champion: ObjectiveDto
    dragon: ObjectiveDto
    inhibitor: ObjectiveDto
    riftHerald: ObjectiveDto
    tower: ObjectiveDto


class MatchTimelineInfoFrameEvent(BaseModel):
    realTimestamp: Optional[int] = None
    timestamp: int
    type: Type = Field(
        ...,
        description="Timeline event type.\n(Known legal values: ASCENDED_EVENT, BUILDING_KILL, CAPTURE_POINT, CHAMPION_KILL, CHAMPION_SPECIAL_KILL, CHAMPION_TRANSFORM, DRAGON_SOUL_GIVEN, ELITE_MONSTER_KILL, GAME_END, ITEM_DESTROYED, ITEM_PURCHASED, ITEM_SOLD, ITEM_UNDO, LEVEL_UP, PAUSE_END, PAUSE_START, SKILL_LEVEL_UP, TURRET_PLATE_DESTROYED, WARD_KILL, WARD_PLACED)",
    )
    itemId: Optional[int] = None
    participantId: Optional[int] = None
    levelUpType: Optional[str] = None
    skillSlot: Optional[int] = None
    creatorId: Optional[int] = None
    wardType: Optional[str] = None
    level: Optional[int] = None
    assistingParticipantIds: Optional[List[int]] = None
    bounty: Optional[int] = None
    killStreakLength: Optional[int] = None
    killerId: Optional[int] = None
    position: Optional[MatchTimelinePosition] = None
    victimDamageDealt: Optional[List[MatchTimelineInfoFrameEventVictimDamageDealt]] = None
    victimDamageReceived: Optional[List[MatchTimelineInfoFrameEventVictimDamageDealt]] = None
    victimId: Optional[int] = None
    killType: Optional[str] = None
    laneType: Optional[str] = None
    teamId: Optional[int] = None
    multiKillLength: Optional[int] = None
    killerTeamId: Optional[int] = None
    monsterType: Optional[str] = None
    monsterSubType: Optional[str] = None
    buildingType: Optional[str] = None
    towerType: Optional[str] = None
    afterId: Optional[int] = None
    beforeId: Optional[int] = None
    goldGain: Optional[int] = None
    gameId: Optional[int] = None
    winningTeam: Optional[int] = None
    transformType: Optional[str] = None
    name: Optional[str] = None


class MatchTimelineInfoFrame(BaseModel):
    events: List[MatchTimelineInfoFrameEvent]
    participantFrames: MatchTimelineInfoFrameParticipantFrames
    timestamp: int


class MatchTimelineInfo(BaseModel):
    frameInterval: int
    frames: List[MatchTimelineInfoFrame]
    gameId: Optional[int] = None
    participants: Optional[List[MatchTimelineInfoParticipant]] = None


class PerksDto(BaseModel):
    statPerks: PerkStatsDto
    styles: List[PerkStyleDto]


class TeamDto(BaseModel):
    bans: List[BanDto]
    objectives: ObjectivesDto
    teamId: int
    win: bool


class MatchTimelineDto(BaseModel):
    metadata: MetadataDto
    info: MatchTimelineInfo


class ParticipantDto(BaseModel):
    assists: int
    baronKills: int
    bountyLevel: int
    champExperience: int
    champLevel: int
    championId: int = Field(
        ...,
        description="Prior to patch 11.4, on Feb 18th, 2021, this field returned invalid championIds. We recommend determining the champion based on the championName field for matches played prior to patch 11.4.",
    )
    championName: str
    championTransform: int = Field(
        ...,
        description="This field is currently only utilized for Kayn's transformations. (Legal values: 0 - None, 1 - Slayer, 2 - Assassin)",
    )
    consumablesPurchased: int
    damageDealtToBuildings: Optional[int] = None
    damageDealtToObjectives: int
    damageDealtToTurrets: int
    damageSelfMitigated: int
    deaths: int
    detectorWardsPlaced: int
    doubleKills: int
    dragonKills: int
    firstBloodAssist: bool
    firstBloodKill: bool
    firstTowerAssist: bool
    firstTowerKill: bool
    gameEndedInEarlySurrender: bool
    gameEndedInSurrender: bool
    goldEarned: int
    goldSpent: int
    individualPosition: str = Field(
        ...,
        description="Both individualPosition and teamPosition are computed by the game server and are different versions of the most likely position played by a player. The individualPosition is the best guess for which position the player actually played in isolation of anything else. The teamPosition is the best guess for which position the player actually played if we add the constraint that each team must have one top player, one jungle, one middle, etc. Generally the recommendation is to use the teamPosition field over the individualPosition field.",
    )
    inhibitorKills: int
    inhibitorTakedowns: Optional[int] = None
    inhibitorsLost: Optional[int] = None
    item0: int
    item1: int
    item2: int
    item3: int
    item4: int
    item5: int
    item6: int
    itemsPurchased: int
    killingSprees: int
    kills: int
    lane: str
    largestCriticalStrike: int
    largestKillingSpree: int
    largestMultiKill: int
    longestTimeSpentLiving: int
    magicDamageDealt: int
    magicDamageDealtToChampions: int
    magicDamageTaken: int
    neutralMinionsKilled: int
    nexusKills: int
    nexusTakedowns: Optional[int] = None
    nexusLost: Optional[int] = None
    objectivesStolen: int
    objectivesStolenAssists: int
    participantId: int
    pentaKills: int
    perks: PerksDto
    physicalDamageDealt: int
    physicalDamageDealtToChampions: int
    physicalDamageTaken: int
    profileIcon: int
    puuid: str
    quadraKills: int
    riotIdName: str
    riotIdTagline: str
    role: str
    sightWardsBoughtInGame: int
    spell1Casts: int
    spell2Casts: int
    spell3Casts: int
    spell4Casts: int
    summoner1Casts: int
    summoner1Id: int
    summoner2Casts: int
    summoner2Id: int
    summonerId: str
    summonerLevel: int
    summonerName: str
    teamEarlySurrendered: bool
    teamId: int
    teamPosition: str = Field(
        ...,
        description="Both individualPosition and teamPosition are computed by the game server and are different versions of the most likely position played by a player. The individualPosition is the best guess for which position the player actually played in isolation of anything else. The teamPosition is the best guess for which position the player actually played if we add the constraint that each team must have one top player, one jungle, one middle, etc. Generally the recommendation is to use the teamPosition field over the individualPosition field.",
    )
    timeCCingOthers: int
    timePlayed: int
    totalDamageDealt: int
    totalDamageDealtToChampions: int
    totalDamageShieldedOnTeammates: int
    totalDamageTaken: int
    totalHeal: int
    totalHealsOnTeammates: int
    totalMinionsKilled: int
    totalTimeCCDealt: int
    totalTimeSpentDead: int
    totalUnitsHealed: int
    tripleKills: int
    trueDamageDealt: int
    trueDamageDealtToChampions: int
    trueDamageTaken: int
    turretKills: int
    turretTakedowns: Optional[int] = None
    turretsLost: Optional[int] = None
    unrealKills: int
    visionScore: int
    visionWardsBoughtInGame: int
    wardsKilled: int
    wardsPlaced: int
    win: bool


class InfoDto(BaseModel):
    gameCreation: int = Field(
        ...,
        description="Unix timestamp for when the game is created on the game server (i.e., the loading screen).",
    )
    gameDuration: int = Field(
        ...,
        description="Prior to patch 11.20, this field returns the game length in milliseconds calculated from gameEndTimestamp - gameStartTimestamp. Post patch 11.20, this field returns the max timePlayed of any participant in the game in seconds, which makes the behavior of this field consistent with that of match-v4. The best way to handling the change in this field is to treat the value as milliseconds if the gameEndTimestamp field isn't in the response and to treat the value as seconds if gameEndTimestamp is in the response.",
    )
    gameEndTimestamp: Optional[int] = Field(
        None,
        description='Unix timestamp for when match ends on the game server. This timestamp can occasionally be significantly longer than when the match "ends". The most reliable way of determining the timestamp for the end of the match would be to add the max time played of any participant to the gameStartTimestamp. This field was added to match-v5 in patch 11.20 on Oct 5th, 2021.',
    )
    gameId: int
    gameMode: str = Field(..., description="Refer to the Game Constants documentation.")
    gameName: str
    gameStartTimestamp: int = Field(..., description="Unix timestamp for when match starts on the game server.")
    gameType: str
    gameVersion: str = Field(
        ...,
        description="The first two parts can be used to determine the patch a game was played on.",
    )
    mapId: int = Field(..., description="Refer to the Game Constants documentation.")
    participants: List[ParticipantDto]
    platformId: str = Field(..., description="Platform where the match was played.")
    queueId: int = Field(..., description="Refer to the Game Constants documentation.")
    teams: List[TeamDto]
    tournamentCode: Optional[str] = Field(
        None,
        description="Tournament code used to generate the match. This field was added to match-v5 in patch 11.13 on June 23rd, 2021.",
    )


class MatchDto(BaseModel):
    metadata: MetadataDto = Field(..., description="Match metadata.")
    info: InfoDto = Field(..., description="Match info.")
