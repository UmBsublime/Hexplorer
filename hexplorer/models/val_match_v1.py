# generated by datamodel-codegen:
#   filename:  http://www.mingweisamuel.com/riotapi-schema/openapi-3.0.0.yml
#   timestamp: 2022-01-07T16:18:58+00:00

from __future__ import annotations

from typing import List

from pydantic import BaseModel, Field


class MatchInfoDto(BaseModel):
    matchId: str
    mapId: str
    gameLengthMillis: int
    gameStartMillis: int
    provisioningFlowId: str
    isCompleted: bool
    customGameName: str
    queueId: str
    gameMode: str
    isRanked: bool
    seasonId: str


class AbilityCastsDto(BaseModel):
    grenadeCasts: int
    ability1Casts: int
    ability2Casts: int
    ultimateCasts: int


class CoachDto(BaseModel):
    puuid: str
    teamId: str


class TeamDto(BaseModel):
    teamId: str = Field(
        ...,
        description="This is an arbitrary string. Red and Blue in bomb modes. The puuid of the player in deathmatch.",
    )
    won: bool
    roundsPlayed: int
    roundsWon: int
    numPoints: int = Field(..., description="Team points scored. Number of kills in deathmatch.")


class LocationDto(BaseModel):
    x: int
    y: int


class FinishingDamageDto(BaseModel):
    damageType: str
    damageItem: str
    isSecondaryFireMode: bool


class DamageDto(BaseModel):
    receiver: str = Field(..., description="PUUID")
    damage: int
    legshots: int
    bodyshots: int
    headshots: int


class EconomyDto(BaseModel):
    loadoutValue: int
    weapon: str
    armor: str
    remaining: int
    spent: int


class AbilityDto(BaseModel):
    grenadeEffects: str
    ability1Effects: str
    ability2Effects: str
    ultimateEffects: str


class MatchlistEntryDto(BaseModel):
    matchId: str
    gameStartTimeMillis: int
    teamId: str


class RecentMatchesDto(BaseModel):
    currentTime: int
    matchIds: List[str] = Field(..., description="A list of recent match ids.")


class PlayerStatsDto(BaseModel):
    score: int
    roundsPlayed: int
    kills: int
    deaths: int
    assists: int
    playtimeMillis: int
    abilityCasts: AbilityCastsDto


class PlayerLocationsDto(BaseModel):
    puuid: str
    viewRadians: float
    location: LocationDto


class KillDto(BaseModel):
    timeSinceGameStartMillis: int
    timeSinceRoundStartMillis: int
    killer: str = Field(..., description="PUUID")
    victim: str = Field(..., description="PUUID")
    victimLocation: LocationDto
    assistants: List[str] = Field(..., description="List of PUUIDs")
    playerLocations: List[PlayerLocationsDto]
    finishingDamage: FinishingDamageDto


class MatchlistDto(BaseModel):
    puuid: str
    history: List[MatchlistEntryDto]


class PlayerDto(BaseModel):
    puuid: str
    gameName: str
    tagLine: str
    teamId: str
    partyId: str
    characterId: str
    stats: PlayerStatsDto
    competitiveTier: int
    playerCard: str
    playerTitle: str


class PlayerRoundStatsDto(BaseModel):
    puuid: str
    kills: List[KillDto]
    damage: List[DamageDto]
    score: int
    economy: EconomyDto
    ability: AbilityDto


class RoundResultDto(BaseModel):
    roundNum: int
    roundResult: str
    roundCeremony: str
    winningTeam: str
    bombPlanter: str = Field(..., description="PUUID of player")
    bombDefuser: str = Field(..., description="PUUID of player")
    plantRoundTime: int
    plantPlayerLocations: List[PlayerLocationsDto]
    plantLocation: LocationDto
    plantSite: str
    defuseRoundTime: int
    defusePlayerLocations: List[PlayerLocationsDto]
    defuseLocation: LocationDto
    playerStats: List[PlayerRoundStatsDto]
    roundResultCode: str


class MatchDto(BaseModel):
    matchInfo: MatchInfoDto
    players: List[PlayerDto]
    coaches: List[CoachDto]
    teams: List[TeamDto]
    roundResults: List[RoundResultDto]
